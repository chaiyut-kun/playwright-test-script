{
	"info": {
		"_postman_id": "471c7cb7-00e1-4122-8942-1f1b887215cf",
		"name": "SOFTWARTE-TESTING-FINAL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44003227",
		"_collection_link": "https://ballname.postman.co/workspace/b98ce2e8-8f28-4eae-8c3f-981bc2f01740/collection/44003227-471c7cb7-00e1-4122-8942-1f1b887215cf?action=share&source=collection_link&creator=44003227"
	},
	"item": [
		{
			"name": "[GET] /",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "[GET] /api/users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return 200 if authorized\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"  const res = pm.response.json();\r",
							"  pm.expect(res).to.have.property(\"data\");\r",
							"  pm.expect(res.message).to.eql(\"Get users SuccessFully\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cook",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "[POST] /api/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login to access system and get 200 of status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Login to access system Success and get Token\", function () {\r",
							"    const response = pm.response.json()\r",
							"    const request = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"    console.log(request)\r",
							"    \r",
							"    // expection\r",
							"    pm.expect(response.message).to.contains(\"Login Successfully!\")\r",
							"    pm.expect(response.user.email).to.equals(request.email)\r",
							"    pm.expect(response).to.have.property(\"token\");\r",
							"    \r",
							"    // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\r",
							"    pm.environment.set(\"token\", jsonData.token);\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// === ALL DATA SETS ===\r",
							"\r",
							"// for login\r",
							"const users = [\r",
							"  { email: \"test.627@mail.com\", password: \"test627\" },\r",
							"  { email: \"unique1@mail.com\", password: \"test\" },\r",
							"  { email: \"umami@mail.com\", password: \"umami\" },\r",
							"];\r",
							"\r",
							"// for login fail\r",
							"const unknows = [\r",
							"  { username: \"test.628\", email: \"test.628@mail.com\", password: \"test628\" },\r",
							"  { username: \"meme\", email: \"meme@mail.com\", password: \"meme\" },\r",
							"  { username: \"joke\", email: \"joke.cum\", password: \"jo\" }\r",
							"];\r",
							"\r",
							"// for register\r",
							"const newUsers = [\r",
							"  { username: \"627academy\", email: \"627academy@mail.com\", password: \"La_masia\" },\r",
							"  { username: \"meyou\", email: \"meyou@mail.com\", password: \"lookkhunnhu\" },\r",
							"  { username: \"joker\", email: \"joker@akham.com\", password: \"jokervsbatman\" }\r",
							"];\r",
							"\r",
							"// for register fail\r",
							"const newFailUsers = [...newUsers]; // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô\r",
							"\r",
							"// id user ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏£‡∏≠ update\r",
							"const idUser = [\r",
							"  { id: 107 },\r",
							"  { id: 108 },\r",
							"  { id: 109 },\r",
							"  { id: 110 }\r",
							"];\r",
							"\r",
							"// user ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏£‡∏≠ update\r",
							"const userForUpdate1 = [\r",
							"  { username: \"updatedUser1\", email: \"updateUser1@mail.com\", password: \"updateUser1\" },\r",
							"  { username: \"updatedUser2\", email: \"updateUser2@mail.com\", password: \"updateUser2\" },\r",
							"  { username: \"updatedUser3\", email: \"updateUser3@mail.com\", password: \"updateUser3\" },\r",
							"  { username: \"updatedUser4\", email: \"updateUser4@mail.com\", password: \"updateUser4\" },\r",
							"];\r",
							"\r",
							"// user ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö update\r",
							"const userForUpdate2 = [\r",
							"  { id: 107, username: \"newuser1\", email: \"newuser1@mail.com\", password: \"newuser1\" },\r",
							"  { id: 108, username: \"newuser2\", email: \"newuser2@mail.com\", password: \"newuser2\" },\r",
							"  { id: 109, username: \"newuser3\", email: \"newuser3@mail.com\", password: \"newuser3\" },\r",
							"  { id: 110, username: \"newuser4\", email: \"newuser4@mail.com\", password: \"newuser4\" },\r",
							"];\r",
							"\r",
							"// === SET TO ENVIRONMENT ===\r",
							"pm.environment.set(\"users\", JSON.stringify(users));\r",
							"pm.environment.set(\"unknows\", JSON.stringify(unknows));\r",
							"pm.environment.set(\"newUsers\", JSON.stringify(newUsers));\r",
							"pm.environment.set(\"newFailUsers\", JSON.stringify(newFailUsers));\r",
							"pm.environment.set(\"idUser\", JSON.stringify(idUser));\r",
							"pm.environment.set(\"userForUpdate1\", JSON.stringify(userForUpdate1));\r",
							"pm.environment.set(\"userForUpdate2\", JSON.stringify(userForUpdate2));\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test.627@mail.com\",\r\n    \"password\": \"test627\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "[POST] /api/register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"üì¶ Status code is 201 (Created)\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"// ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ response ‡∏°‡∏µ key ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á\r",
							"pm.test(\"‚úÖ Response has user data\", function () {\r",
							"  pm.expect(response).to.have.property(\"data\");\r",
							"  pm.expect(response.data).to.have.property(\"email\");\r",
							"  pm.expect(response.data).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ\r",
							"const requestData = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"üîÅ Email and Name match the request\", function () {\r",
							"  pm.expect(response.user.email).to.eql(requestData.email);\r",
							"  pm.expect(response.user.name).to.eql(requestData.name);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"unique@mail.com\",\r\n    \"name\": \"Helloworld\",\r\n    \"password\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "/api/users/:email",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users/unique@mail.com",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"unique@mail.com"
					]
				}
			},
			"response": []
		}
	]
}